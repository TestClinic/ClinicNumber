#!/usr/bin/env node

const WS_PORT = process.env.WS_PORT || 8081;

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('clinicnumber:server');
var http = require('http');

var WSS = require('ws').Server;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080' || '3000');
app.set('port', process.env.OPENSHIFT_NODEJS_PORT || port);    ////

app.set('ip', process.env.OPENSHIFT_NODEJS_IP || '127.0.0.1'); ////


/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}



/**************************
* Create Websocket server
**************************/
function broadcast()
    {
        var json = JSON.stringify({ n: counter++ });
        
        for(var i = 0; i < wss.clients.length; i++)
            {
                var client = wss.clients[i];
                
                client.send(json);
                console.log('Sent: ', json);
            }
    }


var wss = new WSS({ port: WS_PORT });
var counter = 1;

wss.on('connection', function(socket)
    {
        console.log('クライアントに接続しました');
        
        /****************************
        * Send number on connection
        ****************************/
        var json = JSON.stringify({ n: 1234 });
        socket.send(json);
        
        socket.on('message', function(msg)
            {
                console.log('メッセージ: ', msg);
            });
        
        socket.on('close', function()
            {
                console.log('クライアントと切断しました');
            });
    });


setInterval(broadcast, 1000);
